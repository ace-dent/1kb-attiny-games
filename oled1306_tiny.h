
#pragma once
#include <stdint.h>
#include <avr/io.h>

#define D_DIN PORTB3 // D1
#define D_CLK PORTB4 // D0
#define D_DC  PORTB2
#define D_RES PORTB1

#define OLED1306_PORT_HI(p) (PORTB |= (1 << (p)))
#define OLED1306_PORT_LO(p) (PORTB &= ~(1 << (p)))

namespace oled1306 {
    namespace details {
        constexpr static uint8_t font6x4[94 * 3] = { // last byte always 0x0
            0x00, 0x00, 0x00, // ' '  32
            0x00, 0x17, 0x00, // '!'  33
            0x03, 0x00, 0x03, // '"'  34
            0x1F, 0x0A, 0x1F, // '#'  35
            0x16, 0x1F, 0x0D, // '$'  36
            0x19, 0x04, 0x13, // '%'  37
            0x1A, 0x15, 0x0A, // '&'  38
            0x00, 0x03, 0x00, // '''  39
            0x0E, 0x11, 0x00, // '('  40
            0x00, 0x11, 0x0E, // ')'  41
            0x0A, 0x04, 0x0A, // '*'  42
            0x04, 0x0E, 0x04, // '+'  43
            0x10, 0x08, 0x00, // ','  44
            0x04, 0x04, 0x04, // '-'  45
            0x00, 0x10, 0x00, // '.'  46
            0x18, 0x04, 0x03, // '/'  47
            0x1F, 0x11, 0x1F, // '0'  48
            0x12, 0x1F, 0x10, // '1'  49
            0x1D, 0x15, 0x17, // '2'  50
            0x11, 0x15, 0x1F, // '3'  51
            0x07, 0x04, 0x1F, // '4'  52
            0x17, 0x15, 0x1D, // '5'  53
            0x1F, 0x15, 0x1D, // '6'  54
            0x19, 0x05, 0x03, // '7'  55
            0x1F, 0x15, 0x1F, // '8'  56
            0x17, 0x15, 0x1F, // '9'  57
            0x00, 0x0A, 0x00, // ':'  58
            0x10, 0x0A, 0x00, // ';'  59
            0x04, 0x0A, 0x11, // '<'  60
            0x0A, 0x0A, 0x0A, // '='  61
            0x11, 0x0A, 0x04, // '>'  62
            0x01, 0x15, 0x03, // '?'  63
            0x0E, 0x11, 0x16, // '@'  64
            0x1F, 0x05, 0x1F, // 'A'  65
            0x1F, 0x15, 0x1B, // 'B'  66
            0x0E, 0x11, 0x11, // 'C'  67
            0x1F, 0x11, 0x0E, // 'D'  68
            0x1F, 0x15, 0x15, // 'E'  69
            0x1F, 0x05, 0x05, // 'F'  70
            0x0E, 0x11, 0x1D, // 'G'  71
            0x1F, 0x04, 0x1F, // 'H'  72
            0x11, 0x1F, 0x11, // 'I'  73
            0x08, 0x11, 0x0F, // 'J'  74
            0x1F, 0x04, 0x1B, // 'K'  75
            0x1F, 0x10, 0x10, // 'L'  76
            0x1F, 0x02, 0x1F, // 'M'  77
            0x1F, 0x01, 0x1E, // 'N'  78
            0x0E, 0x11, 0x0E, // 'O'  79
            0x1F, 0x05, 0x06, // 'P'  80
            0x0E, 0x19, 0x1F, // 'Q'  81
            0x1F, 0x05, 0x1B, // 'R'  82
            0x12, 0x15, 0x09, // 'S'  83
            0x01, 0x1F, 0x01, // 'T'  84
            0x0F, 0x10, 0x1F, // 'U'  85
            0x0F, 0x10, 0x0F, // 'V'  86
            0x1F, 0x0C, 0x1F, // 'W'  87
            0x1B, 0x04, 0x1B, // 'X'  88
            0x03, 0x1C, 0x03, // 'Y'  89
            0x19, 0x15, 0x13, // 'Z'  90
            0x00, 0x1F, 0x11, // '['  91
            0x03, 0x04, 0x18, // '\'  92
            0x11, 0x1F, 0x00, // ']'  93
            0x02, 0x01, 0x02, // '^'  94
            0x10, 0x10, 0x10, // '_'  95
            0x01, 0x02, 0x00, // '`'  96
            0x0C, 0x12, 0x1E, // 'a'  97
            0x1F, 0x12, 0x0C, // 'b'  98
            0x0C, 0x12, 0x12, // 'c'  99
            0x0C, 0x12, 0x1F, // 'd' 100
            0x0C, 0x1A, 0x16, // 'e' 101
            0x1E, 0x09, 0x02, // 'f' 102
            0x24, 0x2A, 0x1E, // 'g' 103
            0x1F, 0x04, 0x18, // 'h' 104
            0x00, 0x1D, 0x00, // 'i' 105
            0x20, 0x20, 0x1D, // 'j' 106
            0x1F, 0x04, 0x1A, // 'k' 107
            0x00, 0x0F, 0x10, // 'l' 108
            0x1E, 0x04, 0x1E, // 'm' 109
            0x1E, 0x02, 0x1C, // 'n' 110
            0x0C, 0x12, 0x0C, // 'o' 111
            0x3E, 0x0A, 0x04, // 'p' 112
            0x04, 0x0A, 0x3E, // 'q' 113
            0x1E, 0x04, 0x02, // 'r' 114
            0x14, 0x16, 0x1A, // 's' 115
            0x02, 0x0F, 0x12, // 't' 116
            0x0E, 0x10, 0x1E, // 'u' 117
            0x0E, 0x10, 0x0E, // 'v' 118
            0x1E, 0x08, 0x1E, // 'w' 119
            0x1A, 0x04, 0x1A, // 'x' 120
            0x26, 0x28, 0x1E, // 'y' 121
            0x1A, 0x1E, 0x16, // 'z' 122
            0x04, 0x1F, 0x11, // '{' 123
            0x00, 0x1F, 0x00, // '|' 124
            0x11, 0x1F, 0x04, // '}' 125
        };
        
        constexpr static uint8_t font8x6[94 * 6] = {
            0x00,0x00,0x00,0x00,0x00,0x00,  // ' '
            0x00,0x00,0x2F,0x00,0x00,0x00,  // '!'
            0x00,0x07,0x00,0x07,0x00,0x00,  // '"'
            0x14,0x7F,0x14,0x7F,0x14,0x00,  // '#'
            0x24,0x2A,0x6B,0x2A,0x12,0x00,  // '$'
            0x23,0x13,0x08,0x64,0x62,0x00,  // '%'
            0x36,0x49,0x55,0x22,0x50,0x00,  // '&'
            0x00,0x05,0x03,0x00,0x00,0x00,  // '''
            0x00,0x1C,0x22,0x41,0x00,0x00,  // '('
            0x00,0x41,0x22,0x1C,0x00,0x00,  // ')'
            0x14,0x08,0x3E,0x08,0x14,0x00,  // '*'
            0x08,0x08,0x3E,0x08,0x08,0x00,  // '+'
            0x00,0x50,0x30,0x00,0x00,0x00,  // ','
            0x08,0x08,0x08,0x08,0x08,0x00,  // '-'
            0x00,0x60,0x60,0x00,0x00,0x00,  // '.'
            0x20,0x10,0x08,0x04,0x02,0x00,  // '/'
            0x3E,0x51,0x49,0x45,0x3E,0x00,  // '0'
            0x00,0x42,0x7F,0x40,0x00,0x00,  // '1'
            0x42,0x61,0x51,0x49,0x46,0x00,  // '2'
            0x21,0x41,0x45,0x4B,0x31,0x00,  // '3'
            0x18,0x14,0x12,0x7F,0x10,0x00,  // '4'
            0x27,0x45,0x45,0x45,0x39,0x00,  // '5'
            0x3C,0x4A,0x49,0x49,0x30,0x00,  // '6'
            0x03,0x01,0x71,0x09,0x07,0x00,  // '7'
            0x36,0x49,0x49,0x49,0x36,0x00,  // '8'
            0x06,0x49,0x49,0x29,0x1E,0x00,  // '9'
            0x00,0x36,0x36,0x00,0x00,0x00,  // ':'
            0x00,0x56,0x36,0x00,0x00,0x00,  // ';'
            0x08,0x14,0x22,0x41,0x00,0x00,  // '<'
            0x14,0x14,0x14,0x14,0x14,0x00,  // '='
            0x00,0x41,0x22,0x14,0x08,0x00,  // '>'
            0x02,0x01,0x51,0x09,0x06,0x00,  // '?'
            0x32,0x49,0x79,0x41,0x3E,0x00,  // '@'
            0x7E,0x11,0x11,0x11,0x7E,0x00,  // 'A'
            0x7F,0x49,0x49,0x49,0x36,0x00,  // 'B'
            0x3E,0x41,0x41,0x41,0x22,0x00,  // 'C'
            0x7F,0x41,0x41,0x22,0x1C,0x00,  // 'D'
            0x7F,0x49,0x49,0x49,0x41,0x00,  // 'E'
            0x7F,0x09,0x09,0x09,0x01,0x00,  // 'F'
            0x3E,0x41,0x49,0x49,0x7A,0x00,  // 'G'
            0x7F,0x08,0x08,0x08,0x7F,0x00,  // 'H'
            0x00,0x41,0x7F,0x41,0x00,0x00,  // 'I'
            0x20,0x40,0x41,0x3F,0x01,0x00,  // 'J'
            0x7F,0x08,0x14,0x22,0x41,0x00,  // 'K'
            0x7F,0x40,0x40,0x40,0x40,0x00,  // 'L'
            0x7F,0x02,0x0C,0x02,0x7F,0x00,  // 'M'
            0x7F,0x04,0x08,0x10,0x7F,0x00,  // 'N'
            0x3E,0x41,0x41,0x41,0x3E,0x00,  // 'O'
            0x7F,0x09,0x09,0x09,0x06,0x00,  // 'P'
            0x3E,0x41,0x51,0x21,0x5E,0x00,  // 'Q'
            0x7F,0x09,0x19,0x29,0x46,0x00,  // 'R'
            0x46,0x49,0x49,0x49,0x31,0x00,  // 'S'
            0x01,0x01,0x7F,0x01,0x01,0x00,  // 'T'
            0x3F,0x40,0x40,0x40,0x3F,0x00,  // 'U'
            0x1F,0x20,0x40,0x20,0x1F,0x00,  // 'V'
            0x3F,0x40,0x38,0x40,0x3F,0x00,  // 'W'
            0x63,0x14,0x08,0x14,0x63,0x00,  // 'X'
            0x07,0x08,0x70,0x08,0x07,0x00,  // 'Y'
            0x61,0x51,0x49,0x45,0x43,0x00,  // 'Z'
            0x7F,0x41,0x41,0x00,0x00,0x00,  // '['
            0x02,0x04,0x08,0x10,0x20,0x00,  // backslash
            0x00,0x41,0x41,0x7F,0x00,0x00,  // ']'
            0x04,0x02,0x01,0x02,0x04,0x00,  // '^'
            0x40,0x40,0x40,0x40,0x40,0x00,  // '_'
            0x00,0x01,0x02,0x04,0x00,0x00,  // '`'
            0x20,0x54,0x54,0x54,0x78,0x00,  // 'a'
            0x7F,0x48,0x44,0x44,0x38,0x00,  // 'b'
            0x38,0x44,0x44,0x44,0x20,0x00,  // 'c'
            0x38,0x44,0x44,0x48,0x7F,0x00,  // 'd'
            0x38,0x54,0x54,0x54,0x18,0x00,  // 'e'
            0x08,0x7E,0x09,0x01,0x02,0x00,  // 'f'
            0x0C,0x52,0x52,0x52,0x3E,0x00,  // 'g'
            0x7F,0x08,0x04,0x04,0x78,0x00,  // 'h'
            0x00,0x44,0x7D,0x40,0x00,0x00,  // 'i'
            0x20,0x40,0x44,0x3D,0x00,0x00,  // 'j'
            0x7F,0x10,0x28,0x44,0x00,0x00,  // 'k'
            0x00,0x41,0x7F,0x40,0x00,0x00,  // 'l'
            0x7C,0x04,0x18,0x04,0x78,0x00,  // 'm'
            0x7C,0x08,0x04,0x04,0x78,0x00,  // 'n'
            0x38,0x44,0x44,0x44,0x38,0x00,  // 'o'
            0x7C,0x14,0x14,0x14,0x08,0x00,  // 'p'
            0x08,0x14,0x14,0x18,0x7C,0x00,  // 'q'
            0x7C,0x08,0x04,0x04,0x08,0x00,  // 'r'
            0x48,0x54,0x54,0x54,0x20,0x00,  // 's'
            0x04,0x3F,0x44,0x40,0x20,0x00,  // 't'
            0x3C,0x40,0x40,0x20,0x7C,0x00,  // 'u'
            0x1C,0x20,0x40,0x20,0x1C,0x00,  // 'v'
            0x3C,0x40,0x38,0x40,0x3C,0x00,  // 'w'
            0x44,0x28,0x10,0x28,0x44,0x00,  // 'x'
            0x0C,0x50,0x50,0x50,0x3C,0x00,  // 'y'
            0x44,0x64,0x54,0x4C,0x44,0x00,  // 'z'
            0x00,0x08,0x36,0x41,0x00,0x00,  // '{'
            0x00,0x00,0x7F,0x00,0x00,0x00,  // '|'
            0x00,0x41,0x36,0x08,0x00,0x00,  // '}'
        };
        
        constexpr static uint8_t font8x8[94 * 8] = {
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ' '
            0x00, 0x06, 0x5F, 0x5F, 0x06, 0x00, 0x00, 0x00,  // '!'
            0x00, 0x07, 0x07, 0x00, 0x07, 0x07, 0x00, 0x00,  // '"'
            0x14, 0x7F, 0x7F, 0x14, 0x7F, 0x7F, 0x14, 0x00,  // '#'
            0x24, 0x2E, 0x6B, 0x6B, 0x3A, 0x12, 0x00, 0x00,  // '$'
            0x46, 0x66, 0x30, 0x18, 0x0C, 0x66, 0x62, 0x00,  // '%'
            0x30, 0x7A, 0x4F, 0x5D, 0x37, 0x7A, 0x48, 0x00,  // '&'
            0x04, 0x07, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,  // '''
            0x00, 0x1C, 0x3E, 0x63, 0x41, 0x00, 0x00, 0x00,  // '('
            0x00, 0x41, 0x63, 0x3E, 0x1C, 0x00, 0x00, 0x00,  // ')'
            0x08, 0x2A, 0x3E, 0x1C, 0x1C, 0x3E, 0x2A, 0x08,  // '*'
            0x08, 0x08, 0x3E, 0x3E, 0x08, 0x08, 0x00, 0x00,  // '+'
            0x00, 0x80, 0xE0, 0x60, 0x00, 0x00, 0x00, 0x00,  // ','
            0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x00, 0x00,  // '-'
            0x00, 0x00, 0x60, 0x60, 0x00, 0x00, 0x00, 0x00,  // '.'
            0x60, 0x30, 0x18, 0x0C, 0x06, 0x03, 0x01, 0x00,  // '/'
            0x3E, 0x7F, 0x71, 0x59, 0x4D, 0x7F, 0x3E, 0x00,  // '0'
            0x40, 0x42, 0x7F, 0x7F, 0x40, 0x40, 0x00, 0x00,  // '1'
            0x62, 0x73, 0x59, 0x49, 0x6F, 0x66, 0x00, 0x00,  // '2'
            0x22, 0x63, 0x49, 0x49, 0x7F, 0x36, 0x00, 0x00,  // '3'
            0x18, 0x1C, 0x16, 0x53, 0x7F, 0x7F, 0x50, 0x00,  // '4'
            0x27, 0x67, 0x45, 0x45, 0x7D, 0x39, 0x00, 0x00,  // '5'
            0x3C, 0x7E, 0x4B, 0x49, 0x79, 0x30, 0x00, 0x00,  // '6'
            0x03, 0x03, 0x71, 0x79, 0x0F, 0x07, 0x00, 0x00,  // '7'
            0x36, 0x7F, 0x49, 0x49, 0x7F, 0x36, 0x00, 0x00,  // '8'
            0x06, 0x4F, 0x49, 0x69, 0x3F, 0x1E, 0x00, 0x00,  // '9'
            0x00, 0x00, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00,  // ':'
            0x00, 0x80, 0xE6, 0x66, 0x00, 0x00, 0x00, 0x00,  // ';'
            0x08, 0x1C, 0x36, 0x63, 0x41, 0x00, 0x00, 0x00,  // '<'
            0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x00, 0x00,  // '='
            0x00, 0x41, 0x63, 0x36, 0x1C, 0x08, 0x00, 0x00,  // '>'
            0x02, 0x03, 0x51, 0x59, 0x0F, 0x06, 0x00, 0x00,  // '?'
            0x3E, 0x7F, 0x41, 0x5D, 0x5D, 0x1F, 0x1E, 0x00,  // '@'
            0x7C, 0x7E, 0x13, 0x13, 0x7E, 0x7C, 0x00, 0x00,  // 'A'
            0x41, 0x7F, 0x7F, 0x49, 0x49, 0x7F, 0x36, 0x00,  // 'B'
            0x1C, 0x3E, 0x63, 0x41, 0x41, 0x63, 0x22, 0x00,  // 'C'
            0x41, 0x7F, 0x7F, 0x41, 0x63, 0x3E, 0x1C, 0x00,  // 'D'
            0x41, 0x7F, 0x7F, 0x49, 0x5D, 0x41, 0x63, 0x00,  // 'E'
            0x41, 0x7F, 0x7F, 0x49, 0x1D, 0x01, 0x03, 0x00,  // 'F'
            0x1C, 0x3E, 0x63, 0x41, 0x51, 0x73, 0x72, 0x00,  // 'G'
            0x7F, 0x7F, 0x08, 0x08, 0x7F, 0x7F, 0x00, 0x00,  // 'H'
            0x00, 0x41, 0x7F, 0x7F, 0x41, 0x00, 0x00, 0x00,  // 'I'
            0x30, 0x70, 0x40, 0x41, 0x7F, 0x3F, 0x01, 0x00,  // 'J'
            0x41, 0x7F, 0x7F, 0x08, 0x1C, 0x77, 0x63, 0x00,  // 'K'
            0x41, 0x7F, 0x7F, 0x41, 0x40, 0x60, 0x70, 0x00,  // 'L'
            0x7F, 0x7F, 0x0E, 0x1C, 0x0E, 0x7F, 0x7F, 0x00,  // 'M'
            0x7F, 0x7F, 0x06, 0x0C, 0x18, 0x7F, 0x7F, 0x00,  // 'N'
            0x1C, 0x3E, 0x63, 0x41, 0x63, 0x3E, 0x1C, 0x00,  // 'O'
            0x41, 0x7F, 0x7F, 0x49, 0x09, 0x0F, 0x06, 0x00,  // 'P'
            0x1E, 0x3F, 0x21, 0x71, 0x7F, 0x5E, 0x00, 0x00,  // 'Q'
            0x41, 0x7F, 0x7F, 0x09, 0x19, 0x7F, 0x66, 0x00,  // 'R'
            0x26, 0x6F, 0x4D, 0x59, 0x73, 0x32, 0x00, 0x00,  // 'S'
            0x03, 0x41, 0x7F, 0x7F, 0x41, 0x03, 0x00, 0x00,  // 'T'
            0x7F, 0x7F, 0x40, 0x40, 0x7F, 0x7F, 0x00, 0x00,  // 'U'
            0x1F, 0x3F, 0x60, 0x60, 0x3F, 0x1F, 0x00, 0x00,  // 'V'
            0x7F, 0x7F, 0x30, 0x18, 0x30, 0x7F, 0x7F, 0x00,  // 'W'
            0x43, 0x67, 0x3C, 0x18, 0x3C, 0x67, 0x43, 0x00,  // 'X'
            0x07, 0x4F, 0x78, 0x78, 0x4F, 0x07, 0x00, 0x00,  // 'Y'
            0x47, 0x63, 0x71, 0x59, 0x4D, 0x67, 0x73, 0x00,  // 'Z'
            0x00, 0x7F, 0x7F, 0x41, 0x41, 0x00, 0x00, 0x00,  // '['
            0x01, 0x03, 0x06, 0x0C, 0x18, 0x30, 0x60, 0x00,  // backslash
            0x00, 0x41, 0x41, 0x7F, 0x7F, 0x00, 0x00, 0x00,  // ']'
            0x08, 0x0C, 0x06, 0x03, 0x06, 0x0C, 0x08, 0x00,  // '^'
            0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,  // '_'
            0x00, 0x00, 0x03, 0x07, 0x04, 0x00, 0x00, 0x00,  // '`'
            0x20, 0x74, 0x54, 0x54, 0x3C, 0x78, 0x40, 0x00,  // 'a'
            0x41, 0x7F, 0x3F, 0x48, 0x48, 0x78, 0x30, 0x00,  // 'b'
            0x38, 0x7C, 0x44, 0x44, 0x6C, 0x28, 0x00, 0x00,  // 'c'
            0x30, 0x78, 0x48, 0x49, 0x3F, 0x7F, 0x40, 0x00,  // 'd'
            0x38, 0x7C, 0x54, 0x54, 0x5C, 0x18, 0x00, 0x00,  // 'e'
            0x48, 0x7E, 0x7F, 0x49, 0x03, 0x02, 0x00, 0x00,  // 'f'
            0x98, 0xBC, 0xA4, 0xA4, 0xF8, 0x7C, 0x04, 0x00,  // 'g'
            0x41, 0x7F, 0x7F, 0x08, 0x04, 0x7C, 0x78, 0x00,  // 'h'
            0x00, 0x44, 0x7D, 0x7D, 0x40, 0x00, 0x00, 0x00,  // 'i'
            0x60, 0xE0, 0x80, 0x80, 0xFD, 0x7D, 0x00, 0x00,  // 'j'
            0x41, 0x7F, 0x7F, 0x10, 0x38, 0x6C, 0x44, 0x00,  // 'k'
            0x00, 0x41, 0x7F, 0x7F, 0x40, 0x00, 0x00, 0x00,  // 'l'
            0x7C, 0x7C, 0x18, 0x38, 0x1C, 0x7C, 0x78, 0x00,  // 'm'
            0x7C, 0x7C, 0x04, 0x04, 0x7C, 0x78, 0x00, 0x00,  // 'n'
            0x38, 0x7C, 0x44, 0x44, 0x7C, 0x38, 0x00, 0x00,  // 'o'
            0x84, 0xFC, 0xF8, 0xA4, 0x24, 0x3C, 0x18, 0x00,  // 'p'
            0x18, 0x3C, 0x24, 0xA4, 0xF8, 0xFC, 0x84, 0x00,  // 'q'
            0x44, 0x7C, 0x78, 0x4C, 0x04, 0x1C, 0x18, 0x00,  // 'r'
            0x48, 0x5C, 0x54, 0x54, 0x74, 0x24, 0x00, 0x00,  // 's'
            0x00, 0x04, 0x3E, 0x7F, 0x44, 0x24, 0x00, 0x00,  // 't'
            0x3C, 0x7C, 0x40, 0x40, 0x3C, 0x7C, 0x40, 0x00,  // 'u'
            0x1C, 0x3C, 0x60, 0x60, 0x3C, 0x1C, 0x00, 0x00,  // 'v'
            0x3C, 0x7C, 0x70, 0x38, 0x70, 0x7C, 0x3C, 0x00,  // 'w'
            0x44, 0x6C, 0x38, 0x10, 0x38, 0x6C, 0x44, 0x00,  // 'x'
            0x9C, 0xBC, 0xA0, 0xA0, 0xFC, 0x7C, 0x00, 0x00,  // 'y'
            0x4C, 0x64, 0x74, 0x5C, 0x4C, 0x64, 0x00, 0x00,  // 'z'
            0x08, 0x08, 0x3E, 0x77, 0x41, 0x41, 0x00, 0x00,  // '{'
            0x00, 0x00, 0x00, 0x77, 0x77, 0x00, 0x00, 0x00,  // '|'
            0x41, 0x41, 0x77, 0x3E, 0x08, 0x08, 0x00, 0x00,  // '}'
        };        
        
        template <uint8_t...> struct always_false {
            static const bool value = false;
        };
        
        static void send_value(uint8_t value) {                        
            for (uint8_t i = 0; i < 8; i++) {
                OLED1306_PORT_LO(D_DIN);
                
                if (value & 0b10000000) {
                    OLED1306_PORT_HI(D_DIN);
                }
                
                value <<= 1;
                
                OLED1306_PORT_HI(D_CLK);
                OLED1306_PORT_LO(D_CLK);
            }
        }
    }
    
    static void send_command(uint8_t cmd) {
        OLED1306_PORT_LO(D_DC);
        OLED1306_PORT_LO(D_CLK);
        details::send_value(cmd);
    }

    static void send_data(uint8_t dat) {
        OLED1306_PORT_HI(D_DC);
        OLED1306_PORT_LO(D_CLK);
        details::send_value(dat);
    }    
    
    template <uint8_t... Chars> struct chars {
    private:
        template <uint8_t... Chs> struct _at {
            static_assert(details::always_false<Chs...>::value, "Index out of chars");
        };
        template <uint8_t Index, uint8_t M, uint8_t... Ms> struct _at <Index, M, Ms...> : _at <Index - 1, Ms...> {};
        template <uint8_t M, uint8_t... Ms> struct _at <0, M, Ms...> {
            static const uint8_t value = M;
        };
        
        template <void (*f)(uint8_t), typename = void> inline static void _apply() {}
        template <void (*f)(uint8_t), uint8_t Ch, uint8_t... Chs> inline static void _apply() {
            f(Ch);
            _apply<f, Chs...>();
        }

        template <void (*f)(uint8_t), typename = void> inline static void _apply_inv() {}
        template <void (*f)(uint8_t), uint8_t Ch, uint8_t... Chs> inline static void _apply_inv() {
            _apply_inv<f, Chs...>();
            f(Ch);
        }
        
    public:
        template <uint8_t Index> static uint8_t get() {
            return _at<Index, Chars...>::value;
        }
        
        // C++14
        //template <uint8_t Index> static const uint8_t at = _at<Index, Chars...>::value;

        template <void (*f)(uint8_t)> static void apply() {
            _apply<f, Chars...>();
        }
        
        template <void (*f)(uint8_t)> static void apply_inv() {
            _apply_inv<f, Chars...>();
        }              
    };
    
    namespace details {           
        template <typename T, uint8_t N, uint8_t... Chars> struct make_chars : public make_chars<T, N - 1, T::value()[N - 1], Chars...> {};
        template <typename T, uint8_t... Chars> struct make_chars<T, 0, Chars...> {
            typedef chars<Chars...> type;
        };
        
        template <char Ch> void send_char8x() {
            ::oled1306::send_data(font8x8[8 * (Ch - ' ') + 0]);
            ::oled1306::send_data(font8x8[8 * (Ch - ' ') + 1]);
            ::oled1306::send_data(font8x8[8 * (Ch - ' ') + 2]);
            ::oled1306::send_data(font8x8[8 * (Ch - ' ') + 3]);
            ::oled1306::send_data(font8x8[8 * (Ch - ' ') + 4]);
            ::oled1306::send_data(font8x8[8 * (Ch - ' ') + 5]);
            ::oled1306::send_data(font8x8[8 * (Ch - ' ') + 6]);
            ::oled1306::send_data(font8x8[8 * (Ch - ' ') + 7]);
        }

        template <uint8_t Ch> void send_char6x() {
            ::oled1306::send_data(font8x6[6 * (Ch - ' ') + 0]);
            ::oled1306::send_data(font8x6[6 * (Ch - ' ') + 1]);
            ::oled1306::send_data(font8x6[6 * (Ch - ' ') + 2]);
            ::oled1306::send_data(font8x6[6 * (Ch - ' ') + 3]);
            ::oled1306::send_data(font8x6[6 * (Ch - ' ') + 4]);
            ::oled1306::send_data(font8x6[6 * (Ch - ' ') + 5]);
        }

        template <char Ch> void send_char4x() {
            ::oled1306::send_data(font6x4[3 * (Ch - ' ') + 0]);
            ::oled1306::send_data(font6x4[3 * (Ch - ' ') + 1]);
            ::oled1306::send_data(font6x4[3 * (Ch - ' ') + 2]);
            ::oled1306::send_data(0x0);
        }      
        
        template <typename = void> inline void draw_text8x() {}
        template <uint8_t First, uint8_t... Rest> inline void draw_text8x() {
            details::send_char8x<First>();
            draw_text8x<Rest...>();
        }

        template <typename = void> inline void draw_text6x() {}
        template <uint8_t First, uint8_t... Rest> inline void draw_text6x() {
            details::send_char6x<First>();
            draw_text6x<Rest...>();
        }

        template <typename = void> inline void draw_text4x() {}
        template <uint8_t First, uint8_t... Rest> inline void draw_text4x() {
            details::send_char4x<First>();
            draw_text4x<Rest...>();
        }
    }  
    
    template <uint8_t... Chars> void draw_text8x(const chars<Chars...> &) {
        details::draw_text8x<Chars...>();
    }
    
    template <uint8_t... Chars> void draw_text6x(const chars<Chars...> &) {
        details::draw_text6x<Chars...>();
    }
    
    template <uint8_t... Chars> void draw_text4x(const chars<Chars...> &) {
        details::draw_text4x<Chars...>();
    }
    
    static void set_page_range(uint8_t start, uint8_t end) {
        send_command(0x22);
        send_command(start);
        send_command(end);
    }
    
    static void set_page(uint8_t page) {
        send_command(0x22);
        send_command(page);
        send_command(7);
    }
    
    static void set_coord_range(uint8_t start, uint8_t end) {
        send_command(0x21);
        send_command(start);
        send_command(end);
    }    
    
    static void set_coord(uint8_t coord) {
        send_command(0x21);
        send_command(coord);
        send_command(127);
    }
    
    static void clear() {
        set_page(0);
        set_coord(0);
            
        uint16_t i = 8 * 128;
            
        do {
            send_data(0x00);
        }
        while (--i);
    }
    
    static void init() {
        OLED1306_PORT_HI(D_CLK);
        OLED1306_PORT_LO(D_RES);
    
        volatile uint8_t i = 255;
        do {
            asm volatile("nop");
        }
        while(--i);
    
        OLED1306_PORT_HI(D_RES);
    
        send_command(0xAE);
        send_command(0xD5);
        send_command(0x80);
        send_command(0xA8);
        send_command(0x3F);
        send_command(0x20);
        send_command(0x00);
        send_command(0xAF);
    }
    
    static void shutdown() {
        send_command(0xAE);
    }
    
    namespace details {
        template <typename = void> void dummy() {
            ::oled1306::init();
            ::oled1306::shutdown();
            ::oled1306::set_page_range(0, 0);
            ::oled1306::set_coord_range(0, 0);
            ::oled1306::set_page(0);
            ::oled1306::set_coord(0);
            ::oled1306::clear();
        }    
    }
}

#define txt(s) [](){ struct str_def { constexpr static const char *value() { return s; }}; return oled1306::details::make_chars<str_def, sizeof(s) - 1>::type(); }()
