
#pragma once
#include <avr/io.h>

#define D_DIN PORTB3 // D1
#define D_CLK PORTB4 // D0
#define D_DC  PORTB2
#define D_RES PORTB1

#define PORT_HI(p) (PORTB |= (1 << (p)))
#define PORT_LO(p) (PORTB &= ~(1 << (p)))

namespace oled1306 {
    template <char... Chars> struct chars;

    void send_cmd(unsigned char cmd);
    void send_dat(unsigned char dat);

    namespace details {
        constexpr static unsigned char font6x3[94 * 3] = {
            0x00,0x00,0x00,  // ' '
            0x00,0x5C,0x00,  // '!'
            0x0C,0x00,0x0C,  // '"'
            0x7C,0x28,0x7C,  // '#'
            0x7C,0x44,0x7C,  // '$'
            0x24,0x10,0x48,  // '%'
            0x28,0x54,0x08,  // '&'
            0x00,0x0C,0x00,  // '''
            0x38,0x44,0x00,  // '('
            0x44,0x38,0x00,  // ')'
            0x20,0x10,0x08,  // '/'
            0x10,0x38,0x10,  // '+'
            0x80,0x40,0x00,  // ','
            0x10,0x10,0x10,  // '-'
            0x00,0x40,0x00,  // '.'
            0x20,0x10,0x08,  // '/'
            0x7c,0x44,0x7c,  // '0'
            0x00,0x7C,0x00,  // '1'
            0x74,0x54,0x5c,  // '2'
            0x54,0x54,0x7c,  // '3'
            0x1C,0x10,0x7C,  // '4'
            0x5c,0x54,0x74,  // '5'
            0x7c,0x54,0x74,  // '6'
            0x04,0x74,0x0C,  // '7'
            0x7c,0x54,0x7c,  // '8'
            0x5c,0x54,0x7c,  // '9'
            0x00,0x50,0x00,  // ':'
            0x80,0x50,0x00,  // ';'
            0x10,0x28,0x44,  // '<'
            0x28,0x28,0x28,  // '='
            0x44,0x28,0x10,  // '>'
            0x04,0x54,0x08,  // '?'
            0x38,0x4C,0x5C,  // '@'
            0x78,0x14,0x78,  // 'A'
            0x7C,0x54,0x28,  // 'B'
            0x38,0x44,0x44,  // 'C'
            0x7C,0x44,0x38,  // 'D'
            0x7C,0x54,0x44,  // 'E'
            0x7C,0x14,0x04,  // 'F'
            0x38,0x44,0x34,  // 'G'
            0x7C,0x10,0x7C,  // 'H'
            0x00,0x7C,0x00,  // 'I'
            0x20,0x40,0x3C,  // 'J'
            0x7C,0x10,0x6C,  // 'K'
            0x7C,0x40,0x40,  // 'L'
            0x7C,0x08,0x7C,  // 'M'
            0x7C,0x04,0x7C,  // 'N'
            0x7C,0x44,0x7C,  // 'O'
            0x7C,0x14,0x08,  // 'P'
            0x38,0x44,0x78,  // 'Q'
            0x7C,0x14,0x68,  // 'R'
            0x48,0x54,0x24,  // 'S'
            0x04,0x7C,0x04,  // 'T'
            0x7C,0x40,0x7C,  // 'U'
            0x3C,0x40,0x3C,  // 'V'
            0x7C,0x20,0x7C,  // 'W'
            0x6C,0x10,0x6C,  // 'X'
            0x1C,0x60,0x1C,  // 'Y'
            0x64,0x54,0x4C,  // 'Z'
            0x00,0x00,0x00,  // ' '
            0x00,0x00,0x00,  // ' '
            0x00,0x00,0x00,  // ' '
            0x00,0x00,0x00,  // ' '
            0x00,0x00,0x00,  // ' '
            0x00,0x00,0x00,  // ' '
            
            0b00111000,  // 'a' but 'heart'. There starts special chars (can be used like "abc"). TODO 
            0b01110000,
            0b00111000,
        };        
        
        constexpr static unsigned char font8x6[94 * 6] = {
            0x00,0x00,0x00,0x00,0x00,0x00,  // ' '
            0x00,0x00,0x2f,0x00,0x00,0x00,  // '!'
            0x00,0x07,0x00,0x07,0x00,0x00,  // '"'
            0x14,0x7f,0x14,0x7f,0x14,0x00,  // '#'
            0x24,0x2a,0x6b,0x2a,0x12,0x00,  // '$'
            0x23,0x13,0x08,0x64,0x62,0x00,  // '%'
            0x36,0x49,0x55,0x22,0x50,0x00,  // '&'
            0x00,0x05,0x03,0x00,0x00,0x00,  // '''
            0x00,0x1c,0x22,0x41,0x00,0x00,  // '('
            0x00,0x41,0x22,0x1c,0x00,0x00,  // ')'
            0x14,0x08,0x3e,0x08,0x14,0x00,  // '*'
            0x08,0x08,0x3e,0x08,0x08,0x00,  // '+'
            0x00,0x50,0x30,0x00,0x00,0x00,  // ','
            0x08,0x08,0x08,0x08,0x08,0x00,  // '-'
            0x00,0x60,0x60,0x00,0x00,0x00,  // '.'
            0x20,0x10,0x08,0x04,0x02,0x00,  // '/'
            0x3e,0x51,0x49,0x45,0x3e,0x00,  // '0'
            0x00,0x42,0x7f,0x40,0x00,0x00,  // '1'
            0x42,0x61,0x51,0x49,0x46,0x00,  // '2'
            0x21,0x41,0x45,0x4b,0x31,0x00,  // '3'
            0x18,0x14,0x12,0x7f,0x10,0x00,  // '4'
            0x27,0x45,0x45,0x45,0x39,0x00,  // '5'
            0x3c,0x4a,0x49,0x49,0x30,0x00,  // '6'
            0x03,0x01,0x71,0x09,0x07,0x00,  // '7'
            0x36,0x49,0x49,0x49,0x36,0x00,  // '8'
            0x06,0x49,0x49,0x29,0x1e,0x00,  // '9'
            0x00,0x36,0x36,0x00,0x00,0x00,  // ':'
            0x00,0x56,0x36,0x00,0x00,0x00,  // ';'
            0x08,0x14,0x22,0x41,0x00,0x00,  // '<'
            0x14,0x14,0x14,0x14,0x14,0x00,  // '='
            0x00,0x41,0x22,0x14,0x08,0x00,  // '>'
            0x02,0x01,0x51,0x09,0x06,0x00,  // '?'
            0x32,0x49,0x79,0x41,0x3e,0x00,  // '@'
            0x7e,0x11,0x11,0x11,0x7e,0x00,  // 'A'
            0x7f,0x49,0x49,0x49,0x36,0x00,  // 'B'
            0x3e,0x41,0x41,0x41,0x22,0x00,  // 'C'
            0x7f,0x41,0x41,0x22,0x1c,0x00,  // 'D'
            0x7f,0x49,0x49,0x49,0x41,0x00,  // 'E'
            0x7f,0x09,0x09,0x09,0x01,0x00,  // 'F'
            0x3e,0x41,0x49,0x49,0x7a,0x00,  // 'G'
            0x7f,0x08,0x08,0x08,0x7f,0x00,  // 'H'
            0x00,0x41,0x7f,0x41,0x00,0x00,  // 'I'
            0x20,0x40,0x41,0x3f,0x01,0x00,  // 'J'
            0x7f,0x08,0x14,0x22,0x41,0x00,  // 'K'
            0x7f,0x40,0x40,0x40,0x40,0x00,  // 'L'
            0x7f,0x02,0x0c,0x02,0x7f,0x00,  // 'M'
            0x7f,0x04,0x08,0x10,0x7f,0x00,  // 'N'
            0x3e,0x41,0x41,0x41,0x3e,0x00,  // 'O'
            0x7f,0x09,0x09,0x09,0x06,0x00,  // 'P'
            0x3e,0x41,0x51,0x21,0x5e,0x00,  // 'Q'
            0x7f,0x09,0x19,0x29,0x46,0x00,  // 'R'
            0x46,0x49,0x49,0x49,0x31,0x00,  // 'S'
            0x01,0x01,0x7f,0x01,0x01,0x00,  // 'T'
            0x3f,0x40,0x40,0x40,0x3f,0x00,  // 'U'
            0x1f,0x20,0x40,0x20,0x1f,0x00,  // 'V'
            0x3f,0x40,0x38,0x40,0x3f,0x00,  // 'W'
            0x63,0x14,0x08,0x14,0x63,0x00,  // 'X'
            0x07,0x08,0x70,0x08,0x07,0x00,  // 'Y'
            0x61,0x51,0x49,0x45,0x43,0x00,  // 'Z'
            0x7f,0x41,0x41,0x00,0x00,0x00,  // '['
            0x02,0x04,0x08,0x10,0x20,0x00,  // backslash
            0x00,0x41,0x41,0x7f,0x00,0x00,  // ']'
            0x04,0x02,0x01,0x02,0x04,0x00,  // '^'
            0x40,0x40,0x40,0x40,0x40,0x00,  // '_'
            0x00,0x01,0x02,0x04,0x00,0x00,  // '`'
            0x20,0x54,0x54,0x54,0x78,0x00,  // 'a'
            0x7f,0x48,0x44,0x44,0x38,0x00,  // 'b'
            0x38,0x44,0x44,0x44,0x20,0x00,  // 'c'
            0x38,0x44,0x44,0x48,0x7f,0x00,  // 'd'
            0x38,0x54,0x54,0x54,0x18,0x00,  // 'e'
            0x08,0x7e,0x09,0x01,0x02,0x00,  // 'f'
            0x0c,0x52,0x52,0x52,0x3e,0x00,  // 'g'
            0x7f,0x08,0x04,0x04,0x78,0x00,  // 'h'
            0x00,0x44,0x7d,0x40,0x00,0x00,  // 'i'
            0x20,0x40,0x44,0x3d,0x00,0x00,  // 'j'
            0x7f,0x10,0x28,0x44,0x00,0x00,  // 'k'
            0x00,0x41,0x7f,0x40,0x00,0x00,  // 'l'
            0x7c,0x04,0x18,0x04,0x78,0x00,  // 'm'
            0x7c,0x08,0x04,0x04,0x78,0x00,  // 'n'
            0x38,0x44,0x44,0x44,0x38,0x00,  // 'o'
            0x7c,0x14,0x14,0x14,0x08,0x00,  // 'p'
            0x08,0x14,0x14,0x18,0x7c,0x00,  // 'q'
            0x7c,0x08,0x04,0x04,0x08,0x00,  // 'r'
            0x48,0x54,0x54,0x54,0x20,0x00,  // 's'
            0x04,0x3f,0x44,0x40,0x20,0x00,  // 't'
            0x3c,0x40,0x40,0x20,0x7c,0x00,  // 'u'
            0x1c,0x20,0x40,0x20,0x1c,0x00,  // 'v'
            0x3c,0x40,0x38,0x40,0x3c,0x00,  // 'w'
            0x44,0x28,0x10,0x28,0x44,0x00,  // 'x'
            0x0c,0x50,0x50,0x50,0x3c,0x00,  // 'y'
            0x44,0x64,0x54,0x4c,0x44,0x00,  // 'z'
            0x00,0x08,0x36,0x41,0x00,0x00,  // '{'
            0x00,0x00,0x7f,0x00,0x00,0x00,  // '|'
            0x00,0x41,0x36,0x08,0x00,0x00,  // '}'
        };        
        
        constexpr static unsigned char font8x8[94 * 8] = {
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ' '
            0x00, 0x06, 0x5F, 0x5F, 0x06, 0x00, 0x00, 0x00,  // '!'
            0x00, 0x07, 0x07, 0x00, 0x07, 0x07, 0x00, 0x00,  // '"'
            0x14, 0x7F, 0x7F, 0x14, 0x7F, 0x7F, 0x14, 0x00,  // '#'
            0x24, 0x2E, 0x6B, 0x6B, 0x3A, 0x12, 0x00, 0x00,  // '$'
            0x46, 0x66, 0x30, 0x18, 0x0C, 0x66, 0x62, 0x00,  // '%'
            0x30, 0x7A, 0x4F, 0x5D, 0x37, 0x7A, 0x48, 0x00,  // '&'
            0x04, 0x07, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,  // '''
            0x00, 0x1C, 0x3E, 0x63, 0x41, 0x00, 0x00, 0x00,  // '('
            0x00, 0x41, 0x63, 0x3E, 0x1C, 0x00, 0x00, 0x00,  // ')'
            0x08, 0x2A, 0x3E, 0x1C, 0x1C, 0x3E, 0x2A, 0x08,  // '*'
            0x08, 0x08, 0x3E, 0x3E, 0x08, 0x08, 0x00, 0x00,  // '+'
            0x00, 0x80, 0xE0, 0x60, 0x00, 0x00, 0x00, 0x00,  // ','
            0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x00, 0x00,  // '-'
            0x00, 0x00, 0x60, 0x60, 0x00, 0x00, 0x00, 0x00,  // '.'
            0x60, 0x30, 0x18, 0x0C, 0x06, 0x03, 0x01, 0x00,  // '/'
            0x3E, 0x7F, 0x71, 0x59, 0x4D, 0x7F, 0x3E, 0x00,  // '0'
            0x40, 0x42, 0x7F, 0x7F, 0x40, 0x40, 0x00, 0x00,  // '1'
            0x62, 0x73, 0x59, 0x49, 0x6F, 0x66, 0x00, 0x00,  // '2'
            0x22, 0x63, 0x49, 0x49, 0x7F, 0x36, 0x00, 0x00,  // '3'
            0x18, 0x1C, 0x16, 0x53, 0x7F, 0x7F, 0x50, 0x00,  // '4'
            0x27, 0x67, 0x45, 0x45, 0x7D, 0x39, 0x00, 0x00,  // '5'
            0x3C, 0x7E, 0x4B, 0x49, 0x79, 0x30, 0x00, 0x00,  // '6'
            0x03, 0x03, 0x71, 0x79, 0x0F, 0x07, 0x00, 0x00,  // '7'
            0x36, 0x7F, 0x49, 0x49, 0x7F, 0x36, 0x00, 0x00,  // '8'
            0x06, 0x4F, 0x49, 0x69, 0x3F, 0x1E, 0x00, 0x00,  // '9'
            0x00, 0x00, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00,  // ':'
            0x00, 0x80, 0xE6, 0x66, 0x00, 0x00, 0x00, 0x00,  // ';'
            0x08, 0x1C, 0x36, 0x63, 0x41, 0x00, 0x00, 0x00,  // '<'
            0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x00, 0x00,  // '='
            0x00, 0x41, 0x63, 0x36, 0x1C, 0x08, 0x00, 0x00,  // '>'
            0x02, 0x03, 0x51, 0x59, 0x0F, 0x06, 0x00, 0x00,  // '?'
            0x3E, 0x7F, 0x41, 0x5D, 0x5D, 0x1F, 0x1E, 0x00,  // '@'
            0x7C, 0x7E, 0x13, 0x13, 0x7E, 0x7C, 0x00, 0x00,  // 'A'
            0x41, 0x7F, 0x7F, 0x49, 0x49, 0x7F, 0x36, 0x00,  // 'B'
            0x1C, 0x3E, 0x63, 0x41, 0x41, 0x63, 0x22, 0x00,  // 'C'
            0x41, 0x7F, 0x7F, 0x41, 0x63, 0x3E, 0x1C, 0x00,  // 'D'
            0x41, 0x7F, 0x7F, 0x49, 0x5D, 0x41, 0x63, 0x00,  // 'E'
            0x41, 0x7F, 0x7F, 0x49, 0x1D, 0x01, 0x03, 0x00,  // 'F'
            0x1C, 0x3E, 0x63, 0x41, 0x51, 0x73, 0x72, 0x00,  // 'G'
            0x7F, 0x7F, 0x08, 0x08, 0x7F, 0x7F, 0x00, 0x00,  // 'H'
            0x00, 0x41, 0x7F, 0x7F, 0x41, 0x00, 0x00, 0x00,  // 'I'
            0x30, 0x70, 0x40, 0x41, 0x7F, 0x3F, 0x01, 0x00,  // 'J'
            0x41, 0x7F, 0x7F, 0x08, 0x1C, 0x77, 0x63, 0x00,  // 'K'
            0x41, 0x7F, 0x7F, 0x41, 0x40, 0x60, 0x70, 0x00,  // 'L'
            0x7F, 0x7F, 0x0E, 0x1C, 0x0E, 0x7F, 0x7F, 0x00,  // 'M'
            0x7F, 0x7F, 0x06, 0x0C, 0x18, 0x7F, 0x7F, 0x00,  // 'N'
            0x1C, 0x3E, 0x63, 0x41, 0x63, 0x3E, 0x1C, 0x00,  // 'O'
            0x41, 0x7F, 0x7F, 0x49, 0x09, 0x0F, 0x06, 0x00,  // 'P'
            0x1E, 0x3F, 0x21, 0x71, 0x7F, 0x5E, 0x00, 0x00,  // 'Q'
            0x41, 0x7F, 0x7F, 0x09, 0x19, 0x7F, 0x66, 0x00,  // 'R'
            0x26, 0x6F, 0x4D, 0x59, 0x73, 0x32, 0x00, 0x00,  // 'S'
            0x03, 0x41, 0x7F, 0x7F, 0x41, 0x03, 0x00, 0x00,  // 'T'
            0x7F, 0x7F, 0x40, 0x40, 0x7F, 0x7F, 0x00, 0x00,  // 'U'
            0x1F, 0x3F, 0x60, 0x60, 0x3F, 0x1F, 0x00, 0x00,  // 'V'
            0x7F, 0x7F, 0x30, 0x18, 0x30, 0x7F, 0x7F, 0x00,  // 'W'
            0x43, 0x67, 0x3C, 0x18, 0x3C, 0x67, 0x43, 0x00,  // 'X'
            0x07, 0x4F, 0x78, 0x78, 0x4F, 0x07, 0x00, 0x00,  // 'Y'
            0x47, 0x63, 0x71, 0x59, 0x4D, 0x67, 0x73, 0x00,  // 'Z'
            0x00, 0x7F, 0x7F, 0x41, 0x41, 0x00, 0x00, 0x00,  // '['
            0x01, 0x03, 0x06, 0x0C, 0x18, 0x30, 0x60, 0x00,  // backslash
            0x00, 0x41, 0x41, 0x7F, 0x7F, 0x00, 0x00, 0x00,  // ']'
            0x08, 0x0C, 0x06, 0x03, 0x06, 0x0C, 0x08, 0x00,  // '^'
            0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,  // '_'
            0x00, 0x00, 0x03, 0x07, 0x04, 0x00, 0x00, 0x00,  // '`'
            0x20, 0x74, 0x54, 0x54, 0x3C, 0x78, 0x40, 0x00,  // 'a'
            0x41, 0x7F, 0x3F, 0x48, 0x48, 0x78, 0x30, 0x00,  // 'b'
            0x38, 0x7C, 0x44, 0x44, 0x6C, 0x28, 0x00, 0x00,  // 'c'
            0x30, 0x78, 0x48, 0x49, 0x3F, 0x7F, 0x40, 0x00,  // 'd'
            0x38, 0x7C, 0x54, 0x54, 0x5C, 0x18, 0x00, 0x00,  // 'e'
            0x48, 0x7E, 0x7F, 0x49, 0x03, 0x02, 0x00, 0x00,  // 'f'
            0x98, 0xBC, 0xA4, 0xA4, 0xF8, 0x7C, 0x04, 0x00,  // 'g'
            0x41, 0x7F, 0x7F, 0x08, 0x04, 0x7C, 0x78, 0x00,  // 'h'
            0x00, 0x44, 0x7D, 0x7D, 0x40, 0x00, 0x00, 0x00,  // 'i'
            0x60, 0xE0, 0x80, 0x80, 0xFD, 0x7D, 0x00, 0x00,  // 'j'
            0x41, 0x7F, 0x7F, 0x10, 0x38, 0x6C, 0x44, 0x00,  // 'k'
            0x00, 0x41, 0x7F, 0x7F, 0x40, 0x00, 0x00, 0x00,  // 'l'
            0x7C, 0x7C, 0x18, 0x38, 0x1C, 0x7C, 0x78, 0x00,  // 'm'
            0x7C, 0x7C, 0x04, 0x04, 0x7C, 0x78, 0x00, 0x00,  // 'n'
            0x38, 0x7C, 0x44, 0x44, 0x7C, 0x38, 0x00, 0x00,  // 'o'
            0x84, 0xFC, 0xF8, 0xA4, 0x24, 0x3C, 0x18, 0x00,  // 'p'
            0x18, 0x3C, 0x24, 0xA4, 0xF8, 0xFC, 0x84, 0x00,  // 'q'
            0x44, 0x7C, 0x78, 0x4C, 0x04, 0x1C, 0x18, 0x00,  // 'r'
            0x48, 0x5C, 0x54, 0x54, 0x74, 0x24, 0x00, 0x00,  // 's'
            0x00, 0x04, 0x3E, 0x7F, 0x44, 0x24, 0x00, 0x00,  // 't'
            0x3C, 0x7C, 0x40, 0x40, 0x3C, 0x7C, 0x40, 0x00,  // 'u'
            0x1C, 0x3C, 0x60, 0x60, 0x3C, 0x1C, 0x00, 0x00,  // 'v'
            0x3C, 0x7C, 0x70, 0x38, 0x70, 0x7C, 0x3C, 0x00,  // 'w'
            0x44, 0x6C, 0x38, 0x10, 0x38, 0x6C, 0x44, 0x00,  // 'x'
            0x9C, 0xBC, 0xA0, 0xA0, 0xFC, 0x7C, 0x00, 0x00,  // 'y'
            0x4C, 0x64, 0x74, 0x5C, 0x4C, 0x64, 0x00, 0x00,  // 'z'
            0x08, 0x08, 0x3E, 0x77, 0x41, 0x41, 0x00, 0x00,  // '{'
            0x00, 0x00, 0x00, 0x77, 0x77, 0x00, 0x00, 0x00,  // '|'
            0x41, 0x41, 0x77, 0x3E, 0x08, 0x08, 0x00, 0x00,  // '}'
        };

        template <typename T, char N, char... Chars> struct make_chars : public make_chars<T, N - 1, T::value()[N - 1], Chars...> {};
        template <typename T, char... Chars> struct make_chars<T, 0, Chars...> {
            typedef chars<Chars...> type;
        };

        template <char Ch> void send_char8x() {
            ::oled1306::send_dat(font8x8[8 * (Ch - ' ') + 0]);
            ::oled1306::send_dat(font8x8[8 * (Ch - ' ') + 1]);
            ::oled1306::send_dat(font8x8[8 * (Ch - ' ') + 2]);
            ::oled1306::send_dat(font8x8[8 * (Ch - ' ') + 3]);
            ::oled1306::send_dat(font8x8[8 * (Ch - ' ') + 4]);
            ::oled1306::send_dat(font8x8[8 * (Ch - ' ') + 5]);
            ::oled1306::send_dat(font8x8[8 * (Ch - ' ') + 6]);
            ::oled1306::send_dat(font8x8[8 * (Ch - ' ') + 7]);
        }
        
        template <char Ch> void send_char6x() {
            ::oled1306::send_dat(font8x6[6 * (Ch - ' ') + 0]);
            ::oled1306::send_dat(font8x6[6 * (Ch - ' ') + 1]);
            ::oled1306::send_dat(font8x6[6 * (Ch - ' ') + 2]);
            ::oled1306::send_dat(font8x6[6 * (Ch - ' ') + 3]);
            ::oled1306::send_dat(font8x6[6 * (Ch - ' ') + 4]);
            ::oled1306::send_dat(font8x6[6 * (Ch - ' ') + 5]);
        }      
        
        template <char Ch> void send_char4x() {
            ::oled1306::send_dat(font6x3[3 * (Ch - ' ') + 0]);
            ::oled1306::send_dat(font6x3[3 * (Ch - ' ') + 1]);
            ::oled1306::send_dat(font6x3[3 * (Ch - ' ') + 2]);
            ::oled1306::send_dat(0x0);
        }          
    }
    
    void set_rect(char p0, char p1, char i0, char i1);

    template <char... Chars> struct chars {};

    inline void draw_text8x(const chars<> &) {}
    template <char First, char... Rest> inline void draw_text8x(const chars<First, Rest...> &) {
        details::send_char8x<First>();
        draw_text8x(chars<Rest...> {});
    }
    
    inline void draw_text6x(const chars<> &) {}
    template <char First, char... Rest> inline void draw_text6x(const chars<First, Rest...> &) {
        details::send_char6x<First>();
        draw_text6x(chars<Rest...> {});
    }    
    
    inline void draw_text4x(const chars<> &) {}
    template <char First, char... Rest> inline void draw_text4x(const chars<First, Rest...> &) {
        details::send_char4x<First>();
        draw_text4x(chars<Rest...> {});
    }    
    
    template <char... Chars> inline void draw_text8x(unsigned char page, unsigned char index, const chars<Chars...> &) {
        set_rect(page, page, index, index + sizeof...(Chars) * 8 - 1);
        draw_text8x(chars<Chars...> {});
    }
    
    template <char... Chars> inline void draw_text6x(unsigned char page, unsigned char index, const chars<Chars...> &) {
        set_rect(page, page, index, index + sizeof...(Chars) * 6 - 1);
        draw_text6x(chars<Chars...> {});
    }    
    
    template <char... Chars> inline void draw_text4x(unsigned char page, unsigned char index, const chars<Chars...> &) {
        set_rect(page, page, index, index + sizeof...(Chars) * 4 - 1);
        draw_text4x(chars<Chars...> {});
    }    
    
    template <char HCount, char VCount> void draw_block(unsigned char page, unsigned char index, const char *bytes, unsigned char bcount) {
        set_rect(page, page + VCount - 1, index, index + HCount - 1);
        
        unsigned short i = 0;
        
        while (i < HCount * VCount) {
            for (unsigned char c = 0; c < bcount; c++) {
                send_dat(bytes[c]);
            }
            
            i += bcount;
        }
    }
    
    static void init();
    static void shutdown();
    void clear();
    
    void init() {
        PORT_HI(D_CLK);
        PORT_LO(D_RES);

        for (unsigned char i = 0; i < 255; i++) {
            asm volatile("nop");
        }

        PORT_HI(D_RES);
        
        send_cmd(0xAE);
        send_cmd(0xD5);
        send_cmd(0x80);
        send_cmd(0xA8);
        send_cmd(0x3F);
        send_cmd(0x20);
        send_cmd(0x00);
        send_cmd(0xAF);
    }
    
    void shutdown() {
        send_cmd(0xAE);
    }
    
    template <typename = void> void dummy() {
        init();
        shutdown();
    }
}

#define txt(s) [](){ struct str_def { constexpr static const char *value() { return s; }}; return oled1306::details::make_chars<str_def, sizeof(s) - 1>::type(); }()